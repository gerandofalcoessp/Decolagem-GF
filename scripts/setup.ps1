# Script de Setup Automatizado - Decolagem System
# Este script configura automaticamente o ambiente de desenvolvimento

param(
    [switch]$SkipDocker,
    [switch]$SkipDatabase,
    [string]$Environment = "development"
)

Write-Host "üöÄ Iniciando setup do Decolagem System..." -ForegroundColor Green

# Verificar se Node.js est√° instalado
Write-Host "üìã Verificando pr√©-requisitos..." -ForegroundColor Yellow
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js encontrado: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js n√£o encontrado. Por favor, instale o Node.js 18+ primeiro." -ForegroundColor Red
    exit 1
}

# Verificar se Docker est√° instalado (se n√£o for para pular)
if (-not $SkipDocker) {
    try {
        $dockerVersion = docker --version
        Write-Host "‚úÖ Docker encontrado: $dockerVersion" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è Docker n√£o encontrado. Pulando configura√ß√£o Docker..." -ForegroundColor Yellow
        $SkipDocker = $true
    }
}

# Criar arquivo .env se n√£o existir
Write-Host "üîß Configurando vari√°veis de ambiente..." -ForegroundColor Yellow
if (-not (Test-Path ".env")) {
    if (Test-Path ".env.example") {
        Copy-Item ".env.example" ".env"
        Write-Host "‚úÖ Arquivo .env criado a partir do .env.example" -ForegroundColor Green
        Write-Host "‚ö†Ô∏è IMPORTANTE: Edite o arquivo .env com suas configura√ß√µes reais!" -ForegroundColor Yellow
    } else {
        Write-Host "‚ùå Arquivo .env.example n√£o encontrado!" -ForegroundColor Red
    }
} else {
    Write-Host "‚úÖ Arquivo .env j√° existe" -ForegroundColor Green
}

# Instalar depend√™ncias
Write-Host "üì¶ Instalando depend√™ncias..." -ForegroundColor Yellow
try {
    npm run install:all
    Write-Host "‚úÖ Depend√™ncias instaladas com sucesso!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao instalar depend√™ncias!" -ForegroundColor Red
    exit 1
}

# Configurar banco de dados (se n√£o for para pular)
if (-not $SkipDatabase) {
    Write-Host "üóÑÔ∏è Configurando banco de dados..." -ForegroundColor Yellow
    
    if (-not $SkipDocker) {
        # Subir PostgreSQL via Docker
        Write-Host "üê≥ Iniciando PostgreSQL via Docker..." -ForegroundColor Yellow
        docker-compose up -d postgres
        Start-Sleep -Seconds 10
    }
    
    try {
        npm run db:migrate
        Write-Host "‚úÖ Migra√ß√µes executadas com sucesso!" -ForegroundColor Green
        
        npm run db:seed
        Write-Host "‚úÖ Seeds executados com sucesso!" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è Erro na configura√ß√£o do banco de dados. Verifique as configura√ß√µes." -ForegroundColor Yellow
    }
}

# Executar testes para verificar se tudo est√° funcionando
Write-Host "üß™ Executando testes..." -ForegroundColor Yellow
try {
    npm run test
    Write-Host "‚úÖ Todos os testes passaram!" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima." -ForegroundColor Yellow
}

# Verificar linting
Write-Host "üîç Verificando qualidade do c√≥digo..." -ForegroundColor Yellow
try {
    npm run lint
    Write-Host "‚úÖ C√≥digo est√° seguindo os padr√µes!" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Problemas de linting encontrados. Execute 'npm run lint:fix' para corrigir automaticamente." -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ Setup conclu√≠do!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "1. Edite o arquivo .env com suas configura√ß√µes" -ForegroundColor White
Write-Host "2. Execute 'npm run dev' para iniciar o desenvolvimento" -ForegroundColor White
Write-Host "3. Acesse http://localhost:5173 (frontend) e http://localhost:3001 (backend)" -ForegroundColor White
Write-Host ""
Write-Host "üîß Comandos √∫teis:" -ForegroundColor Cyan
Write-Host "- npm run dev          # Inicia frontend + backend" -ForegroundColor White
Write-Host "- npm run docker:up    # Inicia todos os servi√ßos via Docker" -ForegroundColor White
Write-Host "- npm run test:watch   # Executa testes em modo watch" -ForegroundColor White
Write-Host "- npm run lint:fix     # Corrige problemas de linting" -ForegroundColor White
Write-Host ""