const fetch = require('node-fetch');

const API_BASE = 'http://localhost:4005/api';

async function testSuperAdminPermissions() {
    console.log('üîê Testando login com senha correta...');
    
    try {
        // 1. Login com senha correta
        const loginResponse = await fetch(`${API_BASE}/auth/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                email: 'flavio.almeida@gerandofalcoes.com',
                password: '123456'
            })
        });

        const loginData = await loginResponse.json();
        console.log('üìä Login Response Status:', loginResponse.status);
        console.log('üìä Login Response:', loginData);

        if (!loginResponse.ok) {
            console.error('‚ùå Falha no login:', loginData);
            return;
        }

        const token = loginData.session?.access_token || loginData.access_token || loginData.token;
        if (!token) {
            console.error('‚ùå Token n√£o encontrado na resposta');
            console.log('üîç Estrutura da resposta:', JSON.stringify(loginData, null, 2));
            return;
        }

        console.log('‚úÖ Login bem-sucedido! Token obtido.');

        // 2. Testar cria√ß√£o de usu√°rio
        console.log('\nüî® Testando cria√ß√£o de usu√°rio...');
        const newUser = {
            nome: `Teste Super Admin ${Date.now()}`,
            email: `teste.superadmin.${Date.now()}@test.com`,
            password: 'TesteSenha123!', // Corrigido: era 'senha', agora √© 'password'
            role: 'lider_regional',
            regional: 'SP'
        };

        const createResponse = await fetch(`${API_BASE}/auth/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(newUser)
        });

        const createData = await createResponse.json();
        console.log('üìä Create User Status:', createResponse.status);
        console.log('üìä Create User Response:', createData);

        if (createResponse.ok) {
            console.log('‚úÖ Usu√°rio criado com sucesso!');
            
            // 3. Listar usu√°rios para verificar
            console.log('\nüìã Listando usu√°rios...');
            const listResponse = await fetch(`${API_BASE}/auth/users`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            const listData = await listResponse.json();
            console.log('üìä List Users Status:', listResponse.status);
            console.log('üìä List Users Response:', listData);
            
            if (listResponse.ok) {
                // Verificar se listData tem a propriedade users
                const users = listData.users || listData;
                const createdUser = Array.isArray(users) ? users.find(u => u.email === newUser.email) : null;
                if (createdUser) {
                    console.log('‚úÖ Usu√°rio encontrado na listagem:', createdUser);
                    
                    // 4. Testar exclus√£o do usu√°rio criado
                    console.log('\nüóëÔ∏è Testando exclus√£o de usu√°rio...');
                    const deleteResponse = await fetch(`${API_BASE}/auth/users/${createdUser.id}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    console.log('üìä Delete User Status:', deleteResponse.status);
                    
                    if (deleteResponse.ok) {
                        console.log('‚úÖ Usu√°rio exclu√≠do com sucesso!');
                    } else {
                        const deleteData = await deleteResponse.json();
                        console.log('‚ùå Erro ao excluir usu√°rio:', deleteData);
                    }
                } else {
                    console.log('‚ùå Usu√°rio criado n√£o encontrado na listagem');
                }
            } else {
                console.log('‚ùå Erro ao listar usu√°rios:', listData);
            }
        } else {
            console.log('‚ùå Erro ao criar usu√°rio:', createData);
        }

        // 5. Verificar informa√ß√µes do usu√°rio logado
        console.log('\nüë§ Verificando informa√ß√µes do usu√°rio logado...');
        const profileResponse = await fetch(`${API_BASE}/auth/profile`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (profileResponse.ok) {
            const profileData = await profileResponse.json();
            console.log('üìä Profile Data:', profileData);
        } else {
            console.log('‚ùå Erro ao obter perfil do usu√°rio');
        }

    } catch (error) {
        console.error('üí• Erro durante o teste:', error.message);
    }
}

testSuperAdminPermissions();