const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: './backend/.env' });

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function debugDashboardSeptember() {
  console.log('üîç DEBUG: Por que o Dashboard n√£o mostra atividades de setembro?\n');
  
  try {
    // 1. Verificar se as vari√°veis de ambiente est√£o corretas
    console.log('1. CONFIGURA√á√ÉO:');
    console.log('SUPABASE_URL:', process.env.SUPABASE_URL ? 'Definida' : 'N√ÉO DEFINIDA');
    console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'Definida' : 'N√ÉO DEFINIDA');
    
    // 2. Buscar todas as metas (que √© o que o Dashboard usa para determinar mesComDados)
    console.log('\n2. METAS NO BANCO (usado pelo Dashboard para mesComDados):');
    const { data: metas, error: metasError } = await supabase
      .from('goals')
      .select('*');
      
    if (metasError) {
      console.log('‚ùå Erro ao buscar metas:', metasError.message);
      return;
    }
    
    console.log(`Total de metas encontradas: ${metas?.length || 0}`);
    
    if (metas && metas.length > 0) {
      console.log('\nAn√°lise das datas nas metas:');
      
      const metasPorMes = {};
      const metasComDataInicio = [];
      const metasComDataInicioField = [];
      const metasComCreatedAt = [];
      
      metas.forEach((meta, index) => {
        console.log(`\nMeta ${index + 1}:`);
        console.log(`  ID: ${meta.id}`);
        console.log(`  T√≠tulo: ${meta.titulo || meta.title || 'Sem t√≠tulo'}`);
        console.log(`  dataInicio: ${meta.dataInicio || 'null'}`);
        console.log(`  data_inicio: ${meta.data_inicio || 'null'}`);
        console.log(`  created_at: ${meta.created_at || 'null'}`);
        
        // Simular a l√≥gica do Dashboard para extrair o m√™s
        let mesExtraido = null;
        
        if (meta.dataInicio) {
          const date = new Date(meta.dataInicio);
          if (!isNaN(date.getTime())) {
            mesExtraido = (date.getMonth() + 1).toString();
            metasComDataInicio.push(meta);
            console.log(`  ‚Üí M√™s extra√≠do de dataInicio: ${mesExtraido}`);
          }
        } else if (meta.data_inicio) {
          const date = new Date(meta.data_inicio);
          if (!isNaN(date.getTime())) {
            mesExtraido = (date.getMonth() + 1).toString();
            metasComDataInicioField.push(meta);
            console.log(`  ‚Üí M√™s extra√≠do de data_inicio: ${mesExtraido}`);
          }
        } else if (meta.created_at) {
          const date = new Date(meta.created_at);
          if (!isNaN(date.getTime())) {
            mesExtraido = (date.getMonth() + 1).toString();
            metasComCreatedAt.push(meta);
            console.log(`  ‚Üí M√™s extra√≠do de created_at: ${mesExtraido}`);
          }
        }
        
        if (mesExtraido) {
          if (!metasPorMes[mesExtraido]) metasPorMes[mesExtraido] = 0;
          metasPorMes[mesExtraido]++;
        }
      });
      
      console.log('\n3. RESUMO DAS DATAS:');
      console.log(`Metas com dataInicio: ${metasComDataInicio.length}`);
      console.log(`Metas com data_inicio: ${metasComDataInicioField.length}`);
      console.log(`Metas com created_at: ${metasComCreatedAt.length}`);
      
      console.log('\n4. METAS POR M√äS (como o Dashboard v√™):');
      const nomesMeses = ['', 'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho', 
                         'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];
      
      for (let mes = 1; mes <= 12; mes++) {
        const mesStr = mes.toString();
        const quantidade = metasPorMes[mesStr] || 0;
        console.log(`  ${nomesMeses[mes]} (${mesStr}): ${quantidade} metas`);
        
        if (mes === 9) {
          console.log(`  ‚ö†Ô∏è  SETEMBRO: ${quantidade} metas encontradas`);
          if (quantidade === 0) {
            console.log('  ‚ùå PROBLEMA: Dashboard considera que setembro N√ÉO tem dados!');
          } else {
            console.log('  ‚úÖ Dashboard deveria mostrar dados de setembro');
          }
        }
      }
    }
    
    // 3. Verificar atividades regionais (que existem mas n√£o s√£o usadas para mesComDados)
    console.log('\n5. ATIVIDADES REGIONAIS (existem mas n√£o afetam mesComDados):');
    const { data: atividades, error: atividadesError } = await supabase
      .from('regional_activities')
      .select('*')
      .gte('activity_date', '2025-09-01')
      .lt('activity_date', '2025-10-01');
      
    if (atividadesError) {
      console.log('‚ùå Erro ao buscar atividades:', atividadesError.message);
    } else {
      console.log(`Atividades de setembro encontradas: ${atividades?.length || 0}`);
      if (atividades && atividades.length > 0) {
        console.log('‚ö†Ô∏è  ESTAS ATIVIDADES EXISTEM MAS N√ÉO S√ÉO CONSIDERADAS PELO mesComDados!');
      }
    }
    
    // 4. Conclus√£o e solu√ß√£o
    console.log('\n6. DIAGN√ìSTICO:');
    console.log('O problema est√° na l√≥gica mesComDados do Dashboard.');
    console.log('O Dashboard s√≥ considera que um m√™s "tem dados" se existirem METAS para aquele m√™s.');
    console.log('As ATIVIDADES REGIONAIS n√£o s√£o consideradas na l√≥gica mesComDados.');
    console.log('');
    console.log('SOLU√á√ïES POSS√çVEIS:');
    console.log('1. Modificar a l√≥gica mesComDados para considerar tamb√©m atividades regionais');
    console.log('2. Criar metas para setembro de 2025');
    console.log('3. Remover a verifica√ß√£o mesComDados quando h√° atividades regionais');
    
  } catch (err) {
    console.error('Erro:', err);
  }
}

debugDashboardSeptember();