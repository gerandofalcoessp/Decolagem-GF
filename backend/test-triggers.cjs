const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testTriggers() {
  console.log('üß™ Testando triggers de sincroniza√ß√£o...\n');
  
  try {
    // 1. Testar cria√ß√£o de usu√°rio
    console.log('1Ô∏è‚É£ Testando cria√ß√£o de usu√°rio...');
    
    const testEmail = `test-trigger-${Date.now()}@example.com`;
    const testPassword = 'TestPassword123!';
    
    // Criar usu√°rio via Supabase Auth
    const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
      email: testEmail,
      password: testPassword,
      user_metadata: {
        nome: 'Usu√°rio Teste Trigger',
        funcao: 'Analista',
        regional: 'Nacional',
        role: 'user'
      }
    });
    
    if (createError) {
      console.error('‚ùå Erro ao criar usu√°rio:', createError);
      return;
    }
    
    console.log('‚úÖ Usu√°rio criado:', newUser.user.id);
    
    // Aguardar um pouco para o trigger processar
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Verificar se foi criado na tabela usuarios
    const { data: usuarioCreated, error: checkError } = await supabase
      .from('usuarios')
      .select('*')
      .eq('id', newUser.user.id)
      .single();
    
    if (checkError) {
      console.error('‚ùå Erro ao verificar usu√°rio na tabela usuarios:', checkError);
    } else {
      console.log('‚úÖ Usu√°rio encontrado na tabela usuarios:', usuarioCreated);
    }
    
    // 2. Testar atualiza√ß√£o de usu√°rio
    console.log('\n2Ô∏è‚É£ Testando atualiza√ß√£o de usu√°rio...');
    
    const { data: updatedUser, error: updateError } = await supabase.auth.admin.updateUserById(
      newUser.user.id,
      {
        user_metadata: {
          nome: 'Usu√°rio Teste Trigger Atualizado',
          funcao: 'Coordenador',
          regional: 'S√£o Paulo',
          role: 'admin'
        }
      }
    );
    
    if (updateError) {
      console.error('‚ùå Erro ao atualizar usu√°rio:', updateError);
    } else {
      console.log('‚úÖ Usu√°rio atualizado no Auth');
      
      // Aguardar um pouco para o trigger processar
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Verificar se foi atualizado na tabela usuarios
      const { data: usuarioUpdated, error: checkUpdateError } = await supabase
        .from('usuarios')
        .select('*')
        .eq('id', newUser.user.id)
        .single();
      
      if (checkUpdateError) {
        console.error('‚ùå Erro ao verificar atualiza√ß√£o na tabela usuarios:', checkUpdateError);
      } else {
        console.log('‚úÖ Usu√°rio atualizado na tabela usuarios:', usuarioUpdated);
      }
    }
    
    // 3. Testar exclus√£o de usu√°rio
    console.log('\n3Ô∏è‚É£ Testando exclus√£o de usu√°rio...');
    
    const { data: deletedUser, error: deleteError } = await supabase.auth.admin.deleteUser(
      newUser.user.id
    );
    
    if (deleteError) {
      console.error('‚ùå Erro ao excluir usu√°rio:', deleteError);
    } else {
      console.log('‚úÖ Usu√°rio exclu√≠do do Auth');
      
      // Aguardar um pouco para o trigger processar
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Verificar se foi exclu√≠do da tabela usuarios
      const { data: usuarioDeleted, error: checkDeleteError } = await supabase
        .from('usuarios')
        .select('*')
        .eq('id', newUser.user.id)
        .single();
      
      if (checkDeleteError && checkDeleteError.code === 'PGRST116') {
        console.log('‚úÖ Usu√°rio exclu√≠do da tabela usuarios (n√£o encontrado)');
      } else if (checkDeleteError) {
        console.error('‚ùå Erro ao verificar exclus√£o na tabela usuarios:', checkDeleteError);
      } else {
        console.log('‚ö†Ô∏è Usu√°rio ainda existe na tabela usuarios:', usuarioDeleted);
      }
    }
    
    console.log('\nüéâ Teste de triggers conclu√≠do!');
    
  } catch (err) {
    console.error('üí• Erro geral no teste:', err);
  }
}

testTriggers();