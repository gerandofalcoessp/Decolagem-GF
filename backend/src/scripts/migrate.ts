import 'dotenv/config';
import { supabaseAdmin } from '../services/supabaseClient';
import fs from 'fs';
import path from 'path';

interface Migration {
  id: string;
  name: string;
  sql: string;
  executed_at?: string;
}

class MigrationRunner {
  private migrationsPath: string;

  constructor() {
    this.migrationsPath = path.join(__dirname, '../../../database/migrations');
  }

  /**
   * Cria a tabela de migra√ß√µes se n√£o existir
   */
  private async ensureMigrationsTable(): Promise<void> {
    if (!supabaseAdmin) {
      throw new Error('Supabase Admin n√£o configurado');
    }

    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS migrations (
        id VARCHAR(255) PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        executed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;

    const { error } = await supabaseAdmin.rpc('exec_sql', { sql: createTableSQL });
    
    if (error) {
      throw new Error(`Erro ao criar tabela de migra√ß√µes: ${error.message}`);
    }
  }

  /**
   * Obt√©m migra√ß√µes j√° executadas
   */
  private async getExecutedMigrations(): Promise<string[]> {
    if (!supabaseAdmin) {
      throw new Error('Supabase Admin n√£o configurado');
    }

    const { data, error } = await supabaseAdmin
      .from('migrations')
      .select('id')
      .order('executed_at', { ascending: true });

    if (error) {
      throw new Error(`Erro ao buscar migra√ß√µes executadas: ${error.message}`);
    }

    return data?.map(m => m.id) || [];
  }

  /**
   * L√™ arquivos de migra√ß√£o do diret√≥rio
   */
  private async getMigrationFiles(): Promise<Migration[]> {
    if (!fs.existsSync(this.migrationsPath)) {
      console.log('Diret√≥rio de migra√ß√µes n√£o encontrado. Criando...');
      fs.mkdirSync(this.migrationsPath, { recursive: true });
      return [];
    }

    const files = fs.readdirSync(this.migrationsPath)
      .filter(file => file.endsWith('.sql'))
      .sort();

    const migrations: Migration[] = [];

    for (const file of files) {
      const filePath = path.join(this.migrationsPath, file);
      const sql = fs.readFileSync(filePath, 'utf-8');
      const id = file.replace('.sql', '');
      
      migrations.push({
        id,
        name: file,
        sql,
      });
    }

    return migrations;
  }

  /**
   * Executa uma migra√ß√£o
   */
  private async executeMigration(migration: Migration): Promise<void> {
    if (!supabaseAdmin) {
      throw new Error('Supabase Admin n√£o configurado');
    }

    console.log(`Executando migra√ß√£o: ${migration.name}`);

    // Executar SQL da migra√ß√£o
    const { error: sqlError } = await supabaseAdmin.rpc('exec_sql', { 
      sql: migration.sql 
    });

    if (sqlError) {
      throw new Error(`Erro ao executar migra√ß√£o ${migration.name}: ${sqlError.message}`);
    }

    // Registrar migra√ß√£o como executada
    const { error: insertError } = await supabaseAdmin
      .from('migrations')
      .insert({
        id: migration.id,
        name: migration.name,
      });

    if (insertError) {
      throw new Error(`Erro ao registrar migra√ß√£o ${migration.name}: ${insertError.message}`);
    }

    console.log(`‚úÖ Migra√ß√£o ${migration.name} executada com sucesso`);
  }

  /**
   * Executa todas as migra√ß√µes pendentes
   */
  async runMigrations(): Promise<void> {
    try {
      console.log('üöÄ Iniciando execu√ß√£o de migra√ß√µes...');

      // Verificar se o Supabase Admin est√° configurado
      if (!supabaseAdmin) {
        console.error('‚ùå Supabase Admin n√£o est√° configurado. Verifique as vari√°veis de ambiente.');
        process.exit(1);
      }

      // Garantir que a tabela de migra√ß√µes existe
      await this.ensureMigrationsTable();

      // Obter migra√ß√µes executadas e arquivos de migra√ß√£o
      const [executedMigrations, migrationFiles] = await Promise.all([
        this.getExecutedMigrations(),
        this.getMigrationFiles(),
      ]);

      console.log(`üìÅ Encontrados ${migrationFiles.length} arquivos de migra√ß√£o`);
      console.log(`‚úÖ ${executedMigrations.length} migra√ß√µes j√° executadas`);

      // Filtrar migra√ß√µes pendentes
      const pendingMigrations = migrationFiles.filter(
        migration => !executedMigrations.includes(migration.id)
      );

      if (pendingMigrations.length === 0) {
        console.log('‚úÖ Nenhuma migra√ß√£o pendente encontrada');
        return;
      }

      console.log(`üìã Encontradas ${pendingMigrations.length} migra√ß√µes pendentes:`);
      pendingMigrations.forEach(m => console.log(`  - ${m.name}`));

      // Executar migra√ß√µes pendentes
      for (const migration of pendingMigrations) {
        await this.executeMigration(migration);
      }

      console.log('üéâ Todas as migra√ß√µes foram executadas com sucesso!');
    } catch (error) {
      console.error('‚ùå Erro durante execu√ß√£o de migra√ß√µes:', error);
      process.exit(1);
    }
  }

  /**
   * Cria uma nova migra√ß√£o
   */
  async createMigration(name: string): Promise<void> {
    const timestamp = new Date().toISOString().replace(/[-:]/g, '').split('.')[0];
    const filename = `${timestamp}_${name.toLowerCase().replace(/\s+/g, '_')}.sql`;
    const filepath = path.join(this.migrationsPath, filename);

    const template = `-- Migration: ${name}
-- Created at: ${new Date().toISOString()}

-- Add your SQL here
-- Example:
-- CREATE TABLE example (
--   id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--   name TEXT NOT NULL,
--   created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
-- );
`;

    if (!fs.existsSync(this.migrationsPath)) {
      fs.mkdirSync(this.migrationsPath, { recursive: true });
    }

    fs.writeFileSync(filepath, template);
    console.log(`‚úÖ Nova migra√ß√£o criada: ${filename}`);
  }
}

// CLI
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  const migrationRunner = new MigrationRunner();

  switch (command) {
    case 'run':
      await migrationRunner.runMigrations();
      break;
    
    case 'create':
      const name = args[1];
      if (!name) {
        console.error('‚ùå Nome da migra√ß√£o √© obrigat√≥rio');
        console.log('Uso: npm run migrate:create "nome da migra√ß√£o"');
        process.exit(1);
      }
      await migrationRunner.createMigration(name);
      break;
    
    default:
      console.log('Comandos dispon√≠veis:');
      console.log('  npm run migrate:run    - Executa migra√ß√µes pendentes');
      console.log('  npm run migrate:create "nome" - Cria nova migra√ß√£o');
      break;
  }
}

// Executar se for o m√≥dulo principal
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { MigrationRunner };