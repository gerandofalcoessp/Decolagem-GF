const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

async function testDeleteUserSimple() {
  console.log('üß™ Testando exclus√£o de usu√°rio (vers√£o simplificada)...\n');

  // Usar service key para opera√ß√µes administrativas
  const supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
  
  // 1. Criar usu√°rio de teste diretamente no Auth
  console.log('üìù Criando usu√°rio de teste...');
  
  const testEmail = `test.delete.simple.${Date.now()}@test.com`;
  
  const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.createUser({
    email: testEmail,
    password: 'TestPassword123!',
    email_confirm: true
  });

  if (authError) {
    console.error('‚ùå Erro ao criar usu√°rio no Auth:', authError.message);
    return;
  }

  console.log('‚úÖ Usu√°rio criado no Auth:', authUser.user.id);

  // 2. Aguardar sincroniza√ß√£o
  console.log('\n‚è≥ Aguardando sincroniza√ß√£o...');
  await new Promise(resolve => setTimeout(resolve, 3000));

  // 3. Verificar se usu√°rio foi sincronizado na tabela usuarios
  const { data: userData, error: userError } = await supabaseAdmin
    .from('usuarios')
    .select('*')
    .eq('auth_user_id', authUser.user.id)
    .single();

  if (userError) {
    console.error('‚ùå Usu√°rio n√£o foi sincronizado na tabela usuarios:', userError.message);
    // Limpeza
    await supabaseAdmin.auth.admin.deleteUser(authUser.user.id);
    return;
  }

  console.log('‚úÖ Usu√°rio sincronizado na tabela usuarios:', userData.id);

  // 4. Testar exclus√£o via API usando token de super admin
  console.log('\nüîë Fazendo login como super admin para obter token...');
  
  const supabaseClient = createClient(SUPABASE_URL, process.env.SUPABASE_ANON_KEY);
  
  // Tentar com diferentes usu√°rios super admin
  const superAdmins = [
    'flavio.almeida@gerandofalcoes.com',
    'lemaestro@gerandofalcoes.com'
  ];

  let authToken = null;
  
  for (const adminEmail of superAdmins) {
    console.log(`Tentando login com ${adminEmail}...`);
    
    const { data: loginData, error: loginError } = await supabaseClient.auth.signInWithPassword({
      email: adminEmail,
      password: 'password123' // Senha padr√£o comum
    });

    if (!loginError && loginData.session) {
      authToken = loginData.session.access_token;
      console.log('‚úÖ Login realizado com sucesso');
      break;
    } else {
      console.log(`‚ùå Falha no login: ${loginError?.message || 'Erro desconhecido'}`);
    }
  }

  if (!authToken) {
    console.log('‚ö†Ô∏è N√£o foi poss√≠vel fazer login. Testando exclus√£o direta...');
    
    // Teste direto no banco
    const { error: directDeleteError } = await supabaseAdmin
      .from('usuarios')
      .delete()
      .eq('auth_user_id', authUser.user.id);

    if (directDeleteError) {
      console.error('‚ùå Erro na exclus√£o direta:', directDeleteError.message);
    } else {
      console.log('‚úÖ Exclus√£o direta bem-sucedida');
    }

    // Limpeza do Auth
    await supabaseAdmin.auth.admin.deleteUser(authUser.user.id);
    return;
  }

  // 5. Tentar excluir via API
  console.log('\nüóëÔ∏è Tentando excluir via API...');
  
  const deleteResponse = await fetch(`http://localhost:4005/api/auth/users/${userData.id}`, {
    method: 'DELETE',
    headers: {
      'Authorization': `Bearer ${authToken}`
    }
  });

  const deleteResult = await deleteResponse.json();
  
  if (deleteResponse.ok) {
    console.log('‚úÖ Usu√°rio exclu√≠do com sucesso via API:', deleteResult);
  } else {
    console.error('‚ùå Erro ao excluir via API:', deleteResult);
    
    // Limpeza manual
    console.log('\nüßπ Fazendo limpeza manual...');
    await supabaseAdmin.from('usuarios').delete().eq('auth_user_id', authUser.user.id);
    await supabaseAdmin.auth.admin.deleteUser(authUser.user.id);
  }

  // 6. Verifica√ß√£o final
  console.log('\nüîç Verifica√ß√£o final...');
  
  const { data: finalCheck, error: finalError } = await supabaseAdmin
    .from('usuarios')
    .select('*')
    .eq('auth_user_id', authUser.user.id)
    .single();

  if (finalError && finalError.code === 'PGRST116') {
    console.log('‚úÖ Usu√°rio n√£o encontrado (exclu√≠do com sucesso)');
  } else if (finalCheck) {
    console.log('‚ö†Ô∏è Usu√°rio ainda existe:', finalCheck);
  }

  console.log('\nüèÅ Teste conclu√≠do');
}

testDeleteUserSimple().catch(console.error);