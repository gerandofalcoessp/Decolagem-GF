const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function allowAllUsersCalendarEvents() {
  try {
    console.log('üîß Atualizando pol√≠ticas RLS para permitir que qualquer usu√°rio crie eventos...');
    
    // Ler o arquivo SQL
    const sqlScript = fs.readFileSync('./allow-all-users-calendar-events.sql', 'utf8');
    
    console.log('üìÑ Script SQL:');
    console.log(sqlScript);
    
    // Executar o script SQL
    const { data, error } = await supabase.rpc('exec_sql', { sql: sqlScript });
    
    if (error) {
      console.error('‚ùå Erro ao executar script SQL:', error);
      
      // Tentar executar comando por comando
      console.log('üîÑ Tentando executar comandos individualmente...');
      
      const commands = sqlScript.split(';').filter(cmd => cmd.trim());
      
      for (const command of commands) {
        if (command.trim()) {
          console.log(`Executando: ${command.trim().substring(0, 50)}...`);
          const { error: cmdError } = await supabase.rpc('exec_sql', { sql: command.trim() });
          if (cmdError) {
            console.error(`‚ùå Erro no comando: ${cmdError.message}`);
          } else {
            console.log('‚úÖ Comando executado com sucesso');
          }
        }
      }
    } else {
      console.log('‚úÖ Script executado com sucesso!');
    }
    
    console.log('üéâ Agora qualquer usu√°rio autenticado pode criar eventos no calend√°rio!');
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
    console.log('\nüìã Para executar manualmente:');
    console.log('1. Abra o Supabase SQL Editor');
    console.log('2. Cole o conte√∫do do arquivo allow-all-users-calendar-events.sql');
    console.log('3. Execute o script');
  }
}

allowAllUsersCalendarEvents();