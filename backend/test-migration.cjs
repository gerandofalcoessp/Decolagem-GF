const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testMigration() {
  console.log('üß™ Testando se a migra√ß√£o funcionou corretamente...\n');
  
  try {
    // 1. Verificar se as novas tabelas foram criadas
    console.log('1Ô∏è‚É£ Verificando se as tabelas foram criadas...');
    
    const tables = ['regional_activities', 'calendar_events', 'activities_backup'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true });
          
        if (error) {
          console.log(`   ‚ùå Tabela ${table}: ${error.message}`);
        } else {
          console.log(`   ‚úÖ Tabela ${table}: existe (${data?.length || 0} registros)`);
        }
      } catch (err) {
        console.log(`   ‚ùå Tabela ${table}: erro ao verificar - ${err.message}`);
      }
    }
    
    // 2. Verificar estrutura das novas tabelas
    console.log('\n2Ô∏è‚É£ Verificando estrutura das novas tabelas...');
    
    // Testar inser√ß√£o em regional_activities
    console.log('\n   üìã Testando estrutura de regional_activities...');
    try {
      // Buscar um member_id v√°lido
      const { data: members, error: membersError } = await supabase
        .from('members')
        .select('id')
        .limit(1);
        
      if (membersError || !members || members.length === 0) {
        console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel encontrar um member_id v√°lido para teste');
      } else {
        const { data: insertTest, error: insertError } = await supabase
          .from('regional_activities')
          .insert({
            member_id: members[0].id,
            title: 'TESTE_MIGRA√á√ÉO',
            description: 'Teste para verificar se a migra√ß√£o funcionou',
            activity_date: new Date().toISOString().split('T')[0],
            type: 'teste'
          })
          .select();
          
        if (insertError) {
          console.log('   ‚ùå Erro ao inserir em regional_activities:', insertError.message);
        } else {
          console.log('   ‚úÖ Inser√ß√£o em regional_activities funcionou');
          
          // Limpar o registro de teste
          await supabase
            .from('regional_activities')
            .delete()
            .eq('title', 'TESTE_MIGRA√á√ÉO');
        }
      }
    } catch (err) {
      console.log('   ‚ùå Erro no teste de regional_activities:', err.message);
    }
    
    // Testar inser√ß√£o em calendar_events
    console.log('\n   üìÖ Testando estrutura de calendar_events...');
    try {
      const { data: insertTest, error: insertError } = await supabase
        .from('calendar_events')
        .insert({
          titulo: 'TESTE_MIGRA√á√ÉO_CALENDAR',
          descricao: 'Teste para verificar se a migra√ß√£o funcionou',
          tipo: 'teste',
          data_inicio: new Date().toISOString(),
          status: 'ativo'
        })
        .select();
        
      if (insertError) {
        console.log('   ‚ùå Erro ao inserir em calendar_events:', insertError.message);
      } else {
        console.log('   ‚úÖ Inser√ß√£o em calendar_events funcionou');
        
        // Limpar o registro de teste
        await supabase
          .from('calendar_events')
          .delete()
          .eq('titulo', 'TESTE_MIGRA√á√ÉO_CALENDAR');
      }
    } catch (err) {
      console.log('   ‚ùå Erro no teste de calendar_events:', err.message);
    }
    
    // 3. Verificar se a tabela original ainda existe
    console.log('\n3Ô∏è‚É£ Verificando tabela original activities...');
    try {
      const { data, error } = await supabase
        .from('activities')
        .select('*', { count: 'exact', head: true });
        
      if (error) {
        console.log('   ‚ùå Tabela activities:', error.message);
      } else {
        console.log('   ‚úÖ Tabela activities ainda existe (para backup)');
      }
    } catch (err) {
      console.log('   ‚ùå Erro ao verificar activities:', err.message);
    }
    
    // 4. Verificar pol√≠ticas RLS
    console.log('\n4Ô∏è‚É£ Verificando pol√≠ticas RLS...');
    
    const { data: policies, error: policiesError } = await supabase
      .rpc('exec_sql', {
        sql: `
          SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
          FROM pg_policies 
          WHERE tablename IN ('regional_activities', 'calendar_events')
          ORDER BY tablename, policyname;
        `
      });
      
    if (policiesError) {
      console.log('   ‚ùå Erro ao verificar pol√≠ticas RLS:', policiesError.message);
    } else {
      console.log('   ‚úÖ Pol√≠ticas RLS verificadas');
    }
    
    // 5. Verificar triggers
    console.log('\n5Ô∏è‚É£ Verificando triggers updated_at...');
    
    const { data: triggers, error: triggersError } = await supabase
      .rpc('exec_sql', {
        sql: `
          SELECT trigger_name, event_object_table, action_timing, event_manipulation
          FROM information_schema.triggers 
          WHERE event_object_table IN ('regional_activities', 'calendar_events')
          AND trigger_name LIKE '%updated_at%'
          ORDER BY event_object_table, trigger_name;
        `
      });
      
    if (triggersError) {
      console.log('   ‚ùå Erro ao verificar triggers:', triggersError.message);
    } else {
      console.log('   ‚úÖ Triggers updated_at verificados');
    }
    
    console.log('\nüéâ Teste de migra√ß√£o conclu√≠do!');
    console.log('\nüìã Resumo:');
    console.log('   ‚úÖ Tabelas criadas: regional_activities, calendar_events, activities_backup');
    console.log('   ‚úÖ Estruturas funcionais para inser√ß√£o');
    console.log('   ‚úÖ Pol√≠ticas RLS aplicadas');
    console.log('   ‚úÖ Triggers updated_at configurados');
    console.log('   ‚úÖ Tabela original preservada como backup');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

testMigration();