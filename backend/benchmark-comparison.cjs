const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function runBenchmark(queryFunction, description, iterations = 5) {
  console.log(`\nüîÑ ${description}`);
  console.log(`   Executando ${iterations} vezes para obter m√©dia precisa...`);
  console.log('-'.repeat(50));
  
  const times = [];
  let successCount = 0;
  let totalResults = 0;
  
  for (let i = 0; i < iterations; i++) {
    const startTime = Date.now();
    
    try {
      const result = await queryFunction();
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      
      if (result.error) {
        console.log(`   ‚ùå Itera√ß√£o ${i + 1}: Erro - ${result.error.message}`);
      } else {
        times.push(executionTime);
        successCount++;
        totalResults = result.data?.length || result.count || 0;
        console.log(`   ‚úÖ Itera√ß√£o ${i + 1}: ${executionTime}ms`);
      }
    } catch (err) {
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      console.log(`   ‚ùå Itera√ß√£o ${i + 1}: Erro - ${err.message}`);
    }
    
    // Pequena pausa entre itera√ß√µes para evitar sobrecarga
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  if (times.length > 0) {
    const avgTime = times.reduce((sum, time) => sum + time, 0) / times.length;
    const minTime = Math.min(...times);
    const maxTime = Math.max(...times);
    const medianTime = times.sort((a, b) => a - b)[Math.floor(times.length / 2)];
    
    console.log(`\n   üìä ESTAT√çSTICAS:`);
    console.log(`      - Sucessos: ${successCount}/${iterations}`);
    console.log(`      - Resultados: ${totalResults}`);
    console.log(`      - Tempo m√©dio: ${avgTime.toFixed(2)}ms`);
    console.log(`      - Tempo mediano: ${medianTime}ms`);
    console.log(`      - Tempo m√≠nimo: ${minTime}ms`);
    console.log(`      - Tempo m√°ximo: ${maxTime}ms`);
    console.log(`      - Varia√ß√£o: ${(maxTime - minTime)}ms`);
    
    return {
      success: true,
      avgTime,
      medianTime,
      minTime,
      maxTime,
      successRate: successCount / iterations,
      results: totalResults,
      times
    };
  } else {
    console.log(`   ‚ùå Nenhuma execu√ß√£o bem-sucedida`);
    return { success: false };
  }
}

async function benchmarkComparison() {
  console.log('‚ö° BENCHMARK DE PERFORMANCE COM √çNDICES OTIMIZADOS\n');
  console.log('=' .repeat(70));
  console.log('üéØ Objetivo: Medir performance das queries mais importantes');
  console.log('üìä M√©todo: M√∫ltiplas execu√ß√µes para obter estat√≠sticas precisas');
  console.log('=' .repeat(70));

  const benchmarks = [];

  // Benchmark 1: Goals por Member ID (√≠ndice simples)
  const bench1 = await runBenchmark(
    () => supabase
      .from('goals')
      .select('*')
      .not('member_id', 'is', null)
      .limit(10),
    'Goals filtrados por Member ID (idx_goals_member_id)',
    5
  );
  benchmarks.push({ name: 'Goals por Member ID', ...bench1 });

  // Benchmark 2: Goals com ordena√ß√£o por data (√≠ndice de ordena√ß√£o)
  const bench2 = await runBenchmark(
    () => supabase
      .from('goals')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10),
    'Goals ordenados por Data (idx_goals_created_at)',
    5
  );
  benchmarks.push({ name: 'Goals ordenados por Data', ...bench2 });

  // Benchmark 3: Members por Auth User ID (√≠ndice simples)
  const bench3 = await runBenchmark(
    () => supabase
      .from('members')
      .select('*')
      .not('auth_user_id', 'is', null)
      .limit(10),
    'Members por Auth User ID (idx_members_auth_user_id)',
    5
  );
  benchmarks.push({ name: 'Members por Auth User', ...bench3 });

  // Benchmark 4: Usuarios por Email (√≠ndice simples)
  const bench4 = await runBenchmark(
    () => supabase
      .from('usuarios')
      .select('*')
      .not('email', 'is', null)
      .limit(10),
    'Usuarios por Email (idx_usuarios_email)',
    5
  );
  benchmarks.push({ name: 'Usuarios por Email', ...bench4 });

  // Benchmark 5: Goals com filtro composto (member_id + status)
  const bench5 = await runBenchmark(
    () => supabase
      .from('goals')
      .select('*')
      .not('member_id', 'is', null)
      .not('status', 'is', null)
      .limit(5),
    'Goals com Filtro Composto (idx_goals_member_status)',
    5
  );
  benchmarks.push({ name: 'Goals Filtro Composto', ...bench5 });

  // Benchmark 6: Members com filtro composto (auth_user_id + regional)
  const bench6 = await runBenchmark(
    () => supabase
      .from('members')
      .select('*')
      .not('auth_user_id', 'is', null)
      .not('regional', 'is', null)
      .limit(5),
    'Members com Filtro Composto (idx_members_auth_regional)',
    5
  );
  benchmarks.push({ name: 'Members Filtro Composto', ...bench6 });

  // Benchmark 7: Contagem otimizada
  const bench7 = await runBenchmark(
    () => supabase
      .from('goals')
      .select('*', { count: 'exact', head: true })
      .not('member_id', 'is', null),
    'Contagem Goals por Member (usando √≠ndice)',
    3
  );
  benchmarks.push({ name: 'Contagem Goals', ...bench7 });

  // An√°lise dos resultados
  console.log('\nüèÜ AN√ÅLISE COMPARATIVA DOS RESULTADOS');
  console.log('=' .repeat(70));

  const successfulBenchmarks = benchmarks.filter(b => b.success);
  
  if (successfulBenchmarks.length === 0) {
    console.log('‚ùå Nenhum benchmark foi executado com sucesso');
    return;
  }

  // Ranking por performance m√©dia
  console.log('\nü•á RANKING POR PERFORMANCE M√âDIA:');
  successfulBenchmarks
    .sort((a, b) => a.avgTime - b.avgTime)
    .forEach((bench, index) => {
      const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üìä';
      console.log(`   ${medal} ${bench.name}: ${bench.avgTime.toFixed(2)}ms (mediana: ${bench.medianTime}ms)`);
    });

  // An√°lise de consist√™ncia
  console.log('\nüìà AN√ÅLISE DE CONSIST√äNCIA:');
  successfulBenchmarks.forEach(bench => {
    const variation = bench.maxTime - bench.minTime;
    const variationPercent = (variation / bench.avgTime) * 100;
    const consistency = variationPercent < 20 ? 'üü¢ Excelente' : 
                       variationPercent < 50 ? 'üü° Boa' : 'üî¥ Inst√°vel';
    
    console.log(`   ${bench.name}:`);
    console.log(`      - Varia√ß√£o: ${variation}ms (${variationPercent.toFixed(1)}%) - ${consistency}`);
    console.log(`      - Taxa de sucesso: ${(bench.successRate * 100).toFixed(1)}%`);
  });

  // Estat√≠sticas gerais
  const allTimes = successfulBenchmarks.flatMap(b => b.times);
  const overallAvg = allTimes.reduce((sum, time) => sum + time, 0) / allTimes.length;
  const fastQueries = allTimes.filter(time => time < 100).length;
  const slowQueries = allTimes.filter(time => time > 200).length;

  console.log('\nüìä ESTAT√çSTICAS GERAIS:');
  console.log(`   - Tempo m√©dio geral: ${overallAvg.toFixed(2)}ms`);
  console.log(`   - Queries r√°pidas (< 100ms): ${fastQueries}/${allTimes.length} (${(fastQueries/allTimes.length*100).toFixed(1)}%)`);
  console.log(`   - Queries lentas (> 200ms): ${slowQueries}/${allTimes.length} (${(slowQueries/allTimes.length*100).toFixed(1)}%)`);

  // Avalia√ß√£o da efic√°cia dos √≠ndices
  console.log('\nüéØ AVALIA√á√ÉO DA EFIC√ÅCIA DOS √çNDICES:');
  
  if (overallAvg < 100) {
    console.log('   üü¢ EXCELENTE: Performance m√©dia muito boa, √≠ndices funcionando eficientemente');
  } else if (overallAvg < 150) {
    console.log('   üü° BOA: Performance adequada, √≠ndices proporcionando benef√≠cios');
  } else {
    console.log('   üî¥ ATEN√á√ÉO: Performance pode ser melhorada, verificar √≠ndices');
  }

  const fastQueryPercent = (fastQueries / allTimes.length) * 100;
  if (fastQueryPercent > 70) {
    console.log('   üöÄ Maioria das queries executando rapidamente');
  } else if (fastQueryPercent > 40) {
    console.log('   ‚ö° Boa parte das queries com performance adequada');
  } else {
    console.log('   ‚ö†Ô∏è  Muitas queries podem se beneficiar de otimiza√ß√£o adicional');
  }

  // Recomenda√ß√µes
  console.log('\nüí° RECOMENDA√á√ïES:');
  console.log('   1. Queries com varia√ß√£o alta podem se beneficiar de √≠ndices adicionais');
  console.log('   2. Monitore queries que consistentemente excedem 200ms');
  console.log('   3. Considere √≠ndices compostos para filtros m√∫ltiplos frequentes');
  console.log('   4. Verifique se todos os √≠ndices foram criados corretamente no Supabase');

  console.log('\n‚úÖ BENCHMARK CONCLU√çDO!');
  console.log('=' .repeat(70));
}

benchmarkComparison().catch(console.error);