const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üîÑ Verificando e aplicando migra√ß√£o para m√∫ltiplos programas...');

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Credenciais do Supabase n√£o encontradas!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkAndMigrate() {
  try {
    console.log('\n1. Verificando se a coluna programas j√° existe...');
    
    // Tentar fazer uma consulta na coluna programas para ver se ela existe
    const { data: testData, error: testError } = await supabase
      .from('instituicoes')
      .select('programas')
      .limit(1);

    if (!testError) {
      console.log('‚úÖ Coluna programas j√° existe!');
      
      // Mostrar dados atuais
      const { data: sampleData } = await supabase
        .from('instituicoes')
        .select('id, nome, programa, programas')
        .limit(5);
      
      console.log('\nAmostra de dados atuais:');
      sampleData?.forEach(row => {
        console.log(`   ${row.nome}:`);
        console.log(`     Programa (antigo): ${row.programa}`);
        console.log(`     Programas (novo): ${JSON.stringify(row.programas)}`);
      });

      // Verificar estat√≠sticas
      const { count: totalCount } = await supabase
        .from('instituicoes')
        .select('*', { count: 'exact', head: true });

      const { count: migratedCount } = await supabase
        .from('instituicoes')
        .select('*', { count: 'exact', head: true })
        .not('programas', 'is', null);

      console.log(`\nüìä Estat√≠sticas:`);
      console.log(`   Total de institui√ß√µes: ${totalCount}`);
      console.log(`   Com programas migrados: ${migratedCount}`);
      
      if (migratedCount === 0) {
        console.log('\n‚ö†Ô∏è A coluna existe mas n√£o h√° dados migrados. Vamos migrar os dados...');
        await migrateExistingData();
      } else {
        console.log('\n‚úÖ Migra√ß√£o j√° foi aplicada com sucesso!');
      }
      
      return;
    }

    console.log('‚ùå Coluna programas n√£o existe. Precisamos aplicar a migra√ß√£o manualmente.');
    console.log('\nüìù Para aplicar a migra√ß√£o, execute os seguintes comandos SQL no Supabase SQL Editor:');
    console.log('\n-- 1. Adicionar coluna programas');
    console.log('ALTER TABLE public.instituicoes ADD COLUMN programas text[];');
    console.log('\n-- 2. Migrar dados existentes');
    console.log(`UPDATE public.instituicoes 
SET programas = ARRAY[programa::text] 
WHERE programas IS NULL AND programa IS NOT NULL;`);
    console.log('\n-- 3. Criar √≠ndice GIN');
    console.log('CREATE INDEX idx_instituicoes_programas_gin ON public.instituicoes USING gin(programas);');
    console.log('\n-- 4. Adicionar constraint de valida√ß√£o');
    console.log(`ALTER TABLE public.instituicoes 
ADD CONSTRAINT check_programas_valid 
CHECK (programas <@ ARRAY['decolagem', 'as_maras', 'microcredito']::text[]);`);
    
    console.log('\nüîó Acesse: https://supabase.com/dashboard/project/ldfldwfvspclsnpgjgmv/sql');

  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error);
  }
}

async function migrateExistingData() {
  try {
    console.log('\n2. Migrando dados existentes...');
    
    // Buscar todas as institui√ß√µes que n√£o t√™m programas migrados
    const { data: instituicoes, error: fetchError } = await supabase
      .from('instituicoes')
      .select('id, programa')
      .is('programas', null)
      .not('programa', 'is', null);

    if (fetchError) {
      console.error('‚ùå Erro ao buscar institui√ß√µes:', fetchError);
      return;
    }

    console.log(`   Encontradas ${instituicoes.length} institui√ß√µes para migrar...`);

    // Migrar cada institui√ß√£o individualmente
    let migratedCount = 0;
    for (const instituicao of instituicoes) {
      const { error: updateError } = await supabase
        .from('instituicoes')
        .update({ programas: [instituicao.programa] })
        .eq('id', instituicao.id);

      if (updateError) {
        console.error(`   ‚ùå Erro ao migrar institui√ß√£o ${instituicao.id}:`, updateError);
      } else {
        migratedCount++;
      }
    }

    console.log(`   ‚úÖ ${migratedCount} institui√ß√µes migradas com sucesso!`);

  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o de dados:', error);
  }
}

checkAndMigrate();