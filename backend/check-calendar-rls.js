import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';

const supabaseAdmin = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function checkCalendarRLS() {
  console.log('üîç Verificando pol√≠ticas RLS para calendar_events...\n');
  
  try {
    // 1. Verificar se RLS est√° habilitado
    console.log('1. Verificando se RLS est√° habilitado...');
    const { data: rlsStatus, error: rlsError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        SELECT 
          schemaname,
          tablename,
          rowsecurity,
          forcerowsecurity
        FROM pg_tables 
        WHERE tablename = 'calendar_events' 
        AND schemaname = 'public';
      `
    });

    if (rlsError) {
      console.error('‚ùå Erro ao verificar RLS:', rlsError.message);
      return;
    }

    console.log('‚úÖ Status RLS:', rlsStatus);

    // 2. Verificar pol√≠ticas existentes
    console.log('\n2. Verificando pol√≠ticas existentes...');
    const { data: policies, error: policiesError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        SELECT 
          policyname,
          cmd,
          permissive,
          roles,
          qual,
          with_check
        FROM pg_policies 
        WHERE tablename = 'calendar_events' 
        AND schemaname = 'public';
      `
    });

    if (policiesError) {
      console.error('‚ùå Erro ao verificar pol√≠ticas:', policiesError.message);
      return;
    }

    console.log('‚úÖ Pol√≠ticas encontradas:', policies);

    // A fun√ß√£o exec_sql retorna { success: true, rows_affected: N } quando bem-sucedida
    if (policies && policies.success && policies.rows_affected === 0) {
      console.log('\n‚ö†Ô∏è  PROBLEMA ENCONTRADO: Nenhuma pol√≠tica RLS encontrada!');
      console.log('   Isso explica por que os eventos n√£o est√£o sendo salvos.');
      console.log('   Vamos criar as pol√≠ticas necess√°rias...\n');
      
      await createCalendarRLSPolicies();
    } else if (policies && policies.success && policies.rows_affected > 0) {
      console.log(`\nüìã ${policies.rows_affected} pol√≠ticas RLS encontradas para calendar_events`);
      console.log('   As pol√≠ticas existem, vamos verificar se est√£o corretas...\n');
      
      // Vamos tentar uma query mais espec√≠fica para ver os detalhes
      await checkPolicyDetails();
    } else {
      console.log('\n‚ö†Ô∏è  Resposta inesperada da verifica√ß√£o de pol√≠ticas');
      console.log('   Vamos criar as pol√≠ticas para garantir...\n');
      await createCalendarRLSPolicies();
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

async function checkPolicyDetails() {
  console.log('üîç Verificando detalhes das pol√≠ticas existentes...\n');
  
  try {
    const { data: policyDetails, error } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        SELECT 
          policyname,
          cmd,
          roles::text,
          qual,
          with_check
        FROM pg_policies 
        WHERE tablename = 'calendar_events' 
        AND schemaname = 'public'
        ORDER BY policyname;
      `
    });

    if (error) {
      console.error('‚ùå Erro ao obter detalhes das pol√≠ticas:', error.message);
      return;
    }

    console.log('‚úÖ Detalhes das pol√≠ticas:', policyDetails);
    
    // Como a fun√ß√£o exec_sql n√£o retorna os dados diretamente, vamos recriar as pol√≠ticas
    console.log('\n‚ö†Ô∏è  Para garantir que as pol√≠ticas est√£o corretas, vamos recri√°-las...\n');
    await createCalendarRLSPolicies();
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar detalhes:', error.message);
  }
}

async function createCalendarRLSPolicies() {
  console.log('üî® Criando pol√≠ticas RLS para calendar_events...\n');
  
  try {
    // Primeiro, garantir que RLS est√° habilitado
    console.log('1. Habilitando RLS...');
    const { error: enableError } = await supabaseAdmin.rpc('exec_sql', {
      sql: 'ALTER TABLE public.calendar_events ENABLE ROW LEVEL SECURITY;'
    });

    if (enableError) {
      console.error('‚ùå Erro ao habilitar RLS:', enableError.message);
    } else {
      console.log('‚úÖ RLS habilitado');
    }

    // Criar pol√≠tica para SELECT
    console.log('\n2. Criando pol√≠tica SELECT...');
    const { error: selectError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        DROP POLICY IF EXISTS "calendar_events_select_policy" ON public.calendar_events;
        CREATE POLICY "calendar_events_select_policy" ON public.calendar_events
        FOR SELECT USING (
          -- Permitir para usu√°rios autenticados
          auth.role() = 'authenticated'
        );
      `
    });

    if (selectError) {
      console.error('‚ùå Erro ao criar pol√≠tica SELECT:', selectError.message);
    } else {
      console.log('‚úÖ Pol√≠tica SELECT criada');
    }

    // Criar pol√≠tica para INSERT
    console.log('\n3. Criando pol√≠tica INSERT...');
    const { error: insertError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        DROP POLICY IF EXISTS "calendar_events_insert_policy" ON public.calendar_events;
        CREATE POLICY "calendar_events_insert_policy" ON public.calendar_events
        FOR INSERT WITH CHECK (
          -- Permitir para usu√°rios autenticados
          auth.role() = 'authenticated'
        );
      `
    });

    if (insertError) {
      console.error('‚ùå Erro ao criar pol√≠tica INSERT:', insertError.message);
    } else {
      console.log('‚úÖ Pol√≠tica INSERT criada');
    }

    // Criar pol√≠tica para UPDATE
    console.log('\n4. Criando pol√≠tica UPDATE...');
    const { error: updateError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        DROP POLICY IF EXISTS "calendar_events_update_policy" ON public.calendar_events;
        CREATE POLICY "calendar_events_update_policy" ON public.calendar_events
        FOR UPDATE USING (
          -- Permitir para usu√°rios autenticados
          auth.role() = 'authenticated'
        ) WITH CHECK (
          -- Permitir para usu√°rios autenticados
          auth.role() = 'authenticated'
        );
      `
    });

    if (updateError) {
      console.error('‚ùå Erro ao criar pol√≠tica UPDATE:', updateError.message);
    } else {
      console.log('‚úÖ Pol√≠tica UPDATE criada');
    }

    // Criar pol√≠tica para DELETE
    console.log('\n5. Criando pol√≠tica DELETE...');
    const { error: deleteError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        DROP POLICY IF EXISTS "calendar_events_delete_policy" ON public.calendar_events;
        CREATE POLICY "calendar_events_delete_policy" ON public.calendar_events
        FOR DELETE USING (
          -- Permitir para usu√°rios autenticados
          auth.role() = 'authenticated'
        );
      `
    });

    if (deleteError) {
      console.error('‚ùå Erro ao criar pol√≠tica DELETE:', deleteError.message);
    } else {
      console.log('‚úÖ Pol√≠tica DELETE criada');
    }

    console.log('\nüéâ Todas as pol√≠ticas RLS foram criadas com sucesso!');
    console.log('   Agora os eventos de calend√°rio devem ser salvos corretamente.');

  } catch (error) {
    console.error('‚ùå Erro ao criar pol√≠ticas:', error.message);
  }
}

// Executar verifica√ß√£o
checkCalendarRLS().catch(console.error);