require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function testAuthentication() {
  console.log('üîê Testando sistema de autentica√ß√£o...\n');
  
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  
  if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {
    console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
    process.exit(1);
  }
  
  // Cliente an√¥nimo (para registro/login)
  const supabaseAnon = createClient(supabaseUrl, supabaseAnonKey);
  
  // Cliente admin (para opera√ß√µes administrativas)
  const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);
  
  console.log('1. Testando configura√ß√£o de autentica√ß√£o...');
  
  // Verificar se auth est√° funcionando
  const { data: authConfig, error: authError } = await supabaseAdmin.auth.getSession();
  if (authError) {
    console.log('‚ö†Ô∏è  Auth config:', authError.message);
  } else {
    console.log('‚úÖ Configura√ß√£o de auth OK');
  }
  
  console.log('\n2. Testando cria√ß√£o de usu√°rio de teste...');
  
  // Criar usu√°rio de teste
  const testEmail = `teste-${Date.now()}@decolagem.com`;
  const testPassword = 'TesteSeguro123!';
  
  const { data: signUpData, error: signUpError } = await supabaseAnon.auth.signUp({
    email: testEmail,
    password: testPassword,
    options: {
      data: {
        name: 'Usu√°rio Teste',
        role: 'user'
      }
    }
  });
  
  if (signUpError) {
    console.error('‚ùå Erro no registro:', signUpError.message);
  } else {
    console.log('‚úÖ Usu√°rio criado:', signUpData.user?.email);
    console.log('üìß Confirma√ß√£o necess√°ria:', !signUpData.user?.email_confirmed_at);
  }
  
  console.log('\n3. Testando login...');
  
  const { data: signInData, error: signInError } = await supabaseAnon.auth.signInWithPassword({
    email: testEmail,
    password: testPassword
  });
  
  if (signInError) {
    console.error('‚ùå Erro no login:', signInError.message);
  } else {
    console.log('‚úÖ Login realizado:', signInData.user?.email);
    console.log('üîë Token gerado:', !!signInData.session?.access_token);
  }
  
  console.log('\n4. Testando acesso a dados protegidos...');
  
  // Testar acesso √† tabela usuarios
  const { data: usuariosData, error: usuariosError } = await supabaseAnon
    .from('usuarios')
    .select('*')
    .limit(5);
  
  if (usuariosError) {
    console.log('‚ö†Ô∏è  Acesso a usuarios:', usuariosError.message);
  } else {
    console.log('‚úÖ Acesso a usuarios:', usuariosData?.length || 0, 'registros');
  }
  
  // Testar acesso √† tabela members
  const { data: membersData, error: membersError } = await supabaseAnon
    .from('members')
    .select('*')
    .limit(5);
  
  if (membersError) {
    console.log('‚ö†Ô∏è  Acesso a members:', membersError.message);
  } else {
    console.log('‚úÖ Acesso a members:', membersData?.length || 0, 'registros');
  }
  
  // Testar acesso √† tabela goals
  const { data: goalsData, error: goalsError } = await supabaseAnon
    .from('goals')
    .select('*')
    .limit(5);
  
  if (goalsError) {
    console.log('‚ö†Ô∏è  Acesso a goals:', goalsError.message);
  } else {
    console.log('‚úÖ Acesso a goals:', goalsData?.length || 0, 'registros');
  }
  
  console.log('\n5. Testando opera√ß√µes CRUD b√°sicas...');
  
  if (signInData.session) {
    // Configurar cliente autenticado
    supabaseAnon.auth.setSession(signInData.session);
    
    // Tentar inserir um registro na tabela usuarios
    const { data: insertData, error: insertError } = await supabaseAnon
      .from('usuarios')
      .insert({
        name: 'Teste CRUD',
        email: `crud-${Date.now()}@teste.com`,
        role: 'user',
        auth_user_id: signInData.user.id
      })
      .select();
    
    if (insertError) {
      console.log('‚ö†Ô∏è  Insert usuarios:', insertError.message);
    } else {
      console.log('‚úÖ Insert usuarios:', insertData?.length || 0, 'registro criado');
    }
  }
  
  console.log('\n6. Limpeza - removendo usu√°rio de teste...');
  
  // Remover usu√°rio de teste (apenas com admin)
  if (signUpData.user?.id) {
    const { error: deleteError } = await supabaseAdmin.auth.admin.deleteUser(signUpData.user.id);
    
    if (deleteError) {
      console.log('‚ö†Ô∏è  Erro ao remover usu√°rio:', deleteError.message);
    } else {
      console.log('‚úÖ Usu√°rio de teste removido');
    }
  }
  
  console.log('\nüìä Resumo do teste de autentica√ß√£o:');
  console.log('- Configura√ß√£o:', authError ? '‚ùå' : '‚úÖ');
  console.log('- Registro:', signUpError ? '‚ùå' : '‚úÖ');
  console.log('- Login:', signInError ? '‚ùå' : '‚úÖ');
  console.log('- Acesso a dados:', (usuariosError && membersError && goalsError) ? '‚ùå' : '‚úÖ');
}

testAuthentication().catch(console.error);