const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: './backend/.env' });

const supabaseAdmin = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function checkRealtimePublication() {
  console.log('üîç Verificando configura√ß√£o de publica√ß√£o realtime...\n');

  try {
    // 1. Verificar se a publica√ß√£o supabase_realtime existe
    console.log('1Ô∏è‚É£ Verificando publica√ß√£o supabase_realtime...');
    const { data: publications, error: pubError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        SELECT pubname, puballtables 
        FROM pg_publication 
        WHERE pubname = 'supabase_realtime';
      `
    });

    if (pubError) {
      console.error('‚ùå Erro ao verificar publica√ß√£o:', pubError.message);
      return;
    }

    if (!publications || publications.length === 0) {
      console.log('‚ùå Publica√ß√£o supabase_realtime n√£o encontrada!');
      console.log('   Execute: CREATE PUBLICATION supabase_realtime;');
      return;
    }

    console.log('‚úÖ Publica√ß√£o supabase_realtime encontrada:', publications[0]);

    // 2. Verificar quais tabelas est√£o na publica√ß√£o
    console.log('\n2Ô∏è‚É£ Verificando tabelas na publica√ß√£o...');
    const { data: pubTables, error: tablesError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        SELECT 
          schemaname,
          tablename
        FROM pg_publication_tables 
        WHERE pubname = 'supabase_realtime'
        ORDER BY schemaname, tablename;
      `
    });

    if (tablesError) {
      console.error('‚ùå Erro ao verificar tabelas:', tablesError.message);
      return;
    }

    console.log(`‚úÖ Tabelas na publica√ß√£o (${pubTables?.length || 0}):`);
    if (pubTables && pubTables.length > 0) {
      pubTables.forEach(table => {
        console.log(`   - ${table.schemaname}.${table.tablename}`);
      });
    } else {
      console.log('   Nenhuma tabela encontrada na publica√ß√£o');
    }

    // 3. Verificar especificamente as tabelas que precisamos
    const requiredTables = ['goals', 'regional_activities'];
    console.log('\n3Ô∏è‚É£ Verificando tabelas necess√°rias...');
    
    for (const tableName of requiredTables) {
      const isInPublication = pubTables?.some(t => 
        t.schemaname === 'public' && t.tablename === tableName
      );
      
      if (isInPublication) {
        console.log(`‚úÖ ${tableName} est√° na publica√ß√£o`);
      } else {
        console.log(`‚ùå ${tableName} N√ÉO est√° na publica√ß√£o`);
        console.log(`   Execute: ALTER PUBLICATION supabase_realtime ADD TABLE public.${tableName};`);
      }
    }

    // 4. Verificar configura√ß√£o de replica identity
    console.log('\n4Ô∏è‚É£ Verificando replica identity das tabelas...');
    for (const tableName of requiredTables) {
      const { data: replicaInfo, error: replicaError } = await supabaseAdmin.rpc('exec_sql', {
        sql: `
          SELECT 
            schemaname,
            tablename,
            relreplident
          FROM pg_class c
          JOIN pg_namespace n ON c.relnamespace = n.oid
          WHERE n.nspname = 'public' 
          AND c.relname = '${tableName}';
        `
      });

      if (replicaError) {
        console.error(`‚ùå Erro ao verificar replica identity de ${tableName}:`, replicaError.message);
      } else if (replicaInfo && replicaInfo.length > 0) {
        const identity = replicaInfo[0].relreplident;
        const identityMap = {
          'd': 'default (primary key)',
          'f': 'full (all columns)',
          'i': 'index',
          'n': 'nothing'
        };
        console.log(`   ${tableName}: ${identityMap[identity] || identity}`);
        
        if (identity === 'n') {
          console.log(`   ‚ö†Ô∏è  ${tableName} tem replica identity 'nothing' - pode causar problemas`);
          console.log(`   Execute: ALTER TABLE public.${tableName} REPLICA IDENTITY FULL;`);
        }
      }
    }

    // 5. Verificar se o realtime est√° habilitado no projeto
    console.log('\n5Ô∏è‚É£ Verificando configura√ß√£o do realtime...');
    console.log('   Para verificar se o realtime est√° habilitado:');
    console.log('   1. Acesse o dashboard do Supabase');
    console.log('   2. V√° em Database > Replication');
    console.log('   3. Verifique se as tabelas goals e regional_activities est√£o habilitadas');

    // 6. Sugest√µes de corre√ß√£o
    console.log('\nüìã RESUMO E SUGEST√ïES:');
    
    const missingTables = requiredTables.filter(tableName => 
      !pubTables?.some(t => t.schemaname === 'public' && t.tablename === tableName)
    );

    if (missingTables.length > 0) {
      console.log('\n‚ùå PROBLEMA ENCONTRADO: Tabelas n√£o est√£o na publica√ß√£o realtime');
      console.log('\nüîß SOLU√á√ÉO: Execute os seguintes comandos SQL:');
      missingTables.forEach(tableName => {
        console.log(`   ALTER PUBLICATION supabase_realtime ADD TABLE public.${tableName};`);
      });
    } else {
      console.log('\n‚úÖ Todas as tabelas necess√°rias est√£o na publica√ß√£o');
      console.log('\nüîç Se as subscriptions ainda n√£o funcionam, verifique:');
      console.log('   1. Pol√≠ticas RLS (podem bloquear subscriptions)');
      console.log('   2. Configura√ß√£o do realtime no dashboard');
      console.log('   3. Vers√£o do cliente Supabase');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar verifica√ß√£o
checkRealtimePublication().catch(console.error);